#nginx运行时的用户和用户组,因为在运行过程中需要访问相关文件,权限在此处定义
user  nobody nobody;
#定义工作线程数,默认为1,或者为cpu数，或cpu的二倍
worker_processes  1;
#定义全局的日志文件和等级(使用的相对路径为usr/local/nginx)
error_log  logs/error.log  info;
#将nginx进程的ID存在至指定文件
pid        logs/nginx.pid;


events {
#定义每个工作进程的连接数,最大连接数为worker_processes*worker_connections
    worker_connections  1024;
}


http {
#http请求的格式,此处引入mime.types文件
    include       mime.types;
#如果上面不包含,则采用二进制模式
    default_type  application/octet-stream;
#如果需要在进行反向代理时,返回状态码对应的error_page时进行重定向请求,此处要设置为on;不进行反向代理时,会进行重定向请求
    proxy_intercept_errors on;
#定义日志输出格式
    log_format  main  '$remote_addr - [$time_local] "$request" $status $body_bytes_sent "$http_x_forwarded_for"';
#日志输出(代替前面的日志设置)
    access_log  logs/access.log  main;
#开启高效文件传输
    sendfile        on;
#连接时间为65,
    keepalive_timeout  65;
#开启压缩
    gzip  on;

    server {
#监听80端口
        listen       80;
#匹配从哪个域名过来,liufeng1设置在本地hosts文件中
        server_name  liufeng1;
#设置数据字符集
        charset utf-8;
#日志输出(代替前面的日志设置)
        access_log  logs/host.access.log  main;
#设置路径匹配,当请求abc时,转发到proxy_pass的路径,
#当proxy_pass指定的路径以/结尾时,表示拼接时不包含abc,比如proxy_pass = liufeng/,当请求liufeng1/tc/aaa------->liufeng1/aaa
#当proxy_pass指定的路径不以/结尾时,表示拼接时包含abc,比如proxy_pass = liufeng,当请求liufeng1/tc/aaa------->liufeng1/tc/aaa
        location /abc {
            proxy_pass http://127.0.0.1:9001;
			#设置客户端IP
			proxy_set_header X-Real-IP $remote_addr;
			#设置客户端端口
			proxy_set_header X-Real-Port $remote_port;
			#设置完整的代理链
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
#使用rewrite进行重定向,proxy_pass是转发	
#(.*)表示一层路径,第一个小括号用$1取值,第二个小括号用$2表示	
        location /search {
            rewrite ^/search/(.*)/(.*)$ /search.php?p=$1?;
        }
#设置错误码对应		
        error_page  404              /404.html;
        error_page 404 500 502 503 504  /50x.html;
#错误页面重定向
        location = /50x.html {
#root表示根路径,此处为usr/local/nginx,该location表示请求usr/local/nginx/html/50x.html页面
            root   html;
        }
#配置mysvr的负载均衡,weight表示权重,因为不同的服务器性能能不同(可选项)
#ip_hash根据IP分配,保证每次访问到同一台服务器(可选项)
		upstream mysvr { 
			ip_hash;
			server 127.0.0.1:7878 weight=1;
			server 192.168.10.121:3333 weight=2;
		}
#表示匹配以.php结尾
        location ~ \.php$ {
            proxy_pass   http://mysvr;     #此处使用负载均衡
			deny  all;                     #禁止所有路径访问
        }

    }
    
    server {
        listen       80;
        server_name  liufeng2;

        location / {
            proxy_pass http://127.0.0.1:9002;
        }
    }


   server {
        listen       80;
        server_name  liufeng3;

    location / {
         root   html;
         index  index.html index.htm;
        }
    }
	
#设置https
    server {
        listen       443 ssl;
        server_name  localhost;
#ssl证书设置
        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;
#默认即可
        ssl_session_cache    shared:SSL:1m;
#默认即可
        ssl_session_timeout  5m;
#默认即可
        ssl_ciphers  HIGH:!aNULL:!MD5;
#默认即可
        ssl_prefer_server_ciphers  on;

        location / {
            root   html
            index  index.html index.htm;
        }
    }

}
