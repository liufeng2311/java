************************************************
***                Docker安装                ***
************************************************
1.安装依赖
	sudo yum install -y yum-utils device-mapper-persistent-data lvm2
2.添加docker仓库(阿里云的)
	sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
3.安装docker-ce(ce是docker的免费版)
	sudo yum -y install docker-ce
4.启动docker
	systemctl start docker
5.验证docker是否安装成功
	sudo docker version
6.关闭docker
	systemctl stop docker



************************************************
***             Docker常用命令               ***
************************************************
注释:操作容器和镜像时,通过ID和name都可以确定其唯一性
1.搜索镜像(name为我们搜索的镜像名,采用模糊搜索)
	docker search name
2.Docker官网,可查找镜像的tags
	https://hub.docker.com
3.下载指定版本的镜像(不指定版本时下载的是最新版,默认标签latest)
	docker pull name:tag
	docker pull mysql                  下载mysql最新版(相当于docker pull mysql:latest)
	docker pull mysql:8.0.17           下载指定版本的mysql
4.查看本机的镜像
	docker images
5.启动镜像
	docker run --name container-name -p port1:port2 -v /data1:/data2 -d image-name:tag
	常用参数:
	--name                 指定容器的名字
	-p                     指定端口的对应关系,port1为宿主机端口,port2为容器端口
	-d                     指定要启动哪个镜像(不指定tag时,默认为latest)
	-v                     指定挂载路径(/data1为宿主机路径,/data2为容器内路径)(挂载只的是共用)
	以启动mysql
	docker run --name mysql8.0.17 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mysql_root -d mysql:8.0.17
	-e                                   设置变量,和具体的服务挂钩
6.查看容器
	docker ps              查看正在运行的容器
	docker ps -a           查看所有的容器
7.进入容器
	docker exec -it container-name /bin/bash
	-i                      即使没有附加也保持STDIN 打开
	-t                      分配一个伪终端
	container-name          容器ID或NAME
8.退出容器
	exit                    退出容器
	ctrl + d                退出容器
9.关闭、启动容器
	docker stop  container-id(关闭容器)
	docker start container-id(启动容器)
10.删除容器、镜像
	docker rm  container-id    删除容器
	docker rmi images-id       删除镜像(只有当该镜像的容器都被删除时才能删除该镜像)
11.查看容器日志
	docker logs container-id

	
	
************************************************
***               创建Docker镜像             ***
************************************************
1.构建Docker镜像(通过Dockerfile生成镜像)
	docker build -t name path
	docker build -t name .(在Dockerfile所在的目录执行该文件)
	-t指定镜像的名字,path表示Dockerfile文件的位置,path的值通常为.表示当前路径
1.Dockerfile文件(挂载和传输的左侧都是宿主机,右边是容器)
	FROM <image>:<tag>         指定基础镜像(基础镜像指的是一个独立的linux系统,docker就是迷你型linux系统),从docker官网找基础镜像,tags不指定表示lasted
	MAINTAINER <name>          指定维护者信息
	RUN <command>              指定镜像执行时的命令,有shell from和exec from(每个RUN都会创建一层新的镜像)(路径使用绝对路径)
	ADD <src> <dest>           将本地文件上传至容器,只有tar类型会被解压
	COPY <src> <dest>          同ADD,但不会自动解压tar文件,需要进入容器解压
	CMD                        容器启动时的默认命令,有shell from和exec from
	ENTRYPOINT                 容器启动时的默认命令,有shell from和exec from
	LABEL                      用于为镜像添加元数据(可以是描述信息,通过docker inspect查看)(LABEL version="1.0" description="这是一个Web服务器" by="IT笔录")
	ENV                        设置环境变量
	EXPOSE  <ports>            指定与外界交互端口,(此解释存在疑问)
	VOLUME ["path"]            用于指定持久化目录(不懂)
	WORKDIR path               容器的工作目录,之后的ADD、RUN等命令都会在该工作目录下执行
	USER name:group            指定运行容器时的用户名和组
	ARG   key=value            指定参数,可以被$name引用(在docker build命令中以--build-arg a_name=a_value形式赋值)
2.RUN、CMD、ENTRYPOINT的区别
  RUN:用于指定docker build过程中要运行的命令(用于在基础镜像的环境里执行命令)
	每条RUN命令都会产生一个新的镜像,如果想在一个镜像里执行多条命令,适用&&拼接
  CMD:容器启动以后，默认的执行的命令(当命令行没有传参且没有ENTRYPOINT的时候执行)(存在多个CMD,最后一个生效)(推荐使用方式)
  三种用法
	CMD ["executable","param1","param2"] (exec form)      表示未在任何shell环境下,使用shell必须加到中括号里,比如：CMD ["/bin/bash", "-c", "echo 'hello cmd!'"]
	CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
	CMD command param1 param2 (shell form,default /bin/sh -c)

  ENTRYPOINT:容器启动后真正要执行的命令
  两种用法
	ENTRYPOINT ["executable", "param1", "param2"] (exec form, preferred)
	ENTRYPOINT command param1 param2 (shell form)
3.CMD、ENTRYPOINT的使用方法(此时ENTRYPOINT使用的exec form)(shell form下run和cmd的参数都不会传进去)
	当run后面有参数时,将作为ENTRYPOINT的参数(CMD不起作用)
	当run后面没有参数而CMD有时,将CMD的内容作为ENTRYPOINT的参数
	我们使用ENTRYPOINT的exec form来设置docker的启动命令,里面存放命令不变的部分,使用CMD设置参数的默认版本,通过run传递具体的参数,不传参数时,使用默认版本
	    使用ENTRYPOINT的shell form时,只执行ENTRYPOINT后面的语句,因为无法传参
		
************************************************
***                  基础镜像                ***
************************************************