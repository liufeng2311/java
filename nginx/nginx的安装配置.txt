************************************************
*** 使用版本  Linux CentOS 7   nginx  1.17.3 ***
************************************************


************************************************
***                 环境安装                 ***
************************************************
1.安装nginx必要的环境
	yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel
2.下载并解压nginx压缩包
	tar -xvf nginx-1.17.3.tar.gz
3.编译安装nginx(在解压后的目录中执行),
	./configure && make && make install
4.安装后会在usr/local目录下生成nginx目录,启动nginx(/usr/local/nginx/sbin目录下)
	.nginx                启动nginx服务
	.nginx -h             获取帮助
	.nginx -t             验证配置文件状态
	.nginx -s stop        关闭nginx服务
	.nginx -s reload      重新加载配置文件(重启)
	
************************************************
***                 端口设置                 ***
************************************************
1.开放80端口,使外网可以访问
	firewall-cmd --zone=public --add-interface*ens --permanent             将ens这个网卡添加到public这个zone中(此语句视具体情况配置)
	firewall-cmd --zone=public --add-port*80/tcp   --permanent             将public这个zone中添加80端口
	firewall-cmd reload                                                    重启防火墙,使配置生效

************************************************
***     hosts文件修改 (模拟域名请求)         ***
************************************************
1.hosts文件的作用
	hosts文件的作用是域名解析,当我们通过域名请求网址时,会先通过本机的hosts文件查看是否有对应的IP,
	没有的话再通过请求DNS域名解析服务器查找对应的IP
2.hosts文件的修改(该文件需要用管理员身份修改)
	windows10版
	位置            C:\Windows\System32\drivers\etc\hosts
	管理员cmd       notepad    C:\Windows\System32\drivers\etc\hosts   添加域名和IP对应关系,保存
	Linux版本
	位置            /etc/hosts
	以管理员身份修改

************************************************
***             nginx.conf解读               ***
************************************************
1.该部分请查看nginx.conf文件


************************************************
***             location配置详解             ***
************************************************	
1. 域名直接访问配置
	匹配静态文件设置
        location / {                                                   当直接通过server_name访问时被此拦截
            root   html;                                               绝对路径=root/location                            root表示该请求映射到服务器的路径,可以是绝对路径,也可以是相对路径(相对于/usr/local/nginx/)
            index  index.html index.htm;                               如果相对路径下存在index.html,则再次请求server_name/index.html,不存在则匹配index.htm
        }
	匹配动态文件设置
	location = / {
    proxy_pass http://tomcat:8080/index
		}
2.location语法
语法:	location [=|~|~*|^~] /uri/ { … }
	
	    =   开头表示精准匹配
		~   开头表示区分大小写匹配         以**结尾
		!~  开头表示区分大小写不匹配       以**结尾
		~*  开头表示不区分大小写匹配       以**结尾
		!~* 开头表示不区分大小写不匹配     以**结尾
		^~  开头表示以某个字符串开头匹配   以**开头     
		\.aa$  表示以.aa结尾
3.多个location匹配时，选择最长前缀匹配
	首先精确匹配 =-》其次以xx开头匹配^~-》然后是按文件中顺序的正则匹配-》最后是交给 / 通用匹配。
	
************************************************
***                   页面转发               ***
************************************************
1. error_page属性    
	error_page  404                  /404.html;                        
	error_page   500 502 503 504     /50x.html;
用法：当通过proxy_pass转发时,当返回对应的错误码时,会通过error_page找到对应的值,拼接成server_name/值再次请求
	比如：当返回错误码为500时,对应的是/50x.html,通过域名/50x.html,再次请求,找到对应的local进行匹配




************************************************
***              超时配置(504错误)           ***
************************************************	
1.连接nginx超时
	client_header_timeout
	keepalive_timeout 
2.nginx转发超时
	proxy_connect_timeout    nginx与后端服务器建立连接的超时设置,该时间不包括处理事件,建立连接即可,默认60秒
	proxy_read_timeout       后端服务器处理完逻辑的时间,该时间不包括返回给nginx的时间,默认60秒  
	proxy_send_timeout       后端服务器传输结果的时间,默认60秒





************************************************
***                    其他配置              ***
************************************************	
1.client_max_body_size     允许客户端请求的单文件最大字节数









































1.重启服务   systemctl reboot -i