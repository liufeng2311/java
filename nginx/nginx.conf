#指定nginx的用户和用户组,运行时已指定的用户进行权限访问,使用默认的nobody即可
user  nobody nobody;
#定义工作线程数,使用默认值1即可,也可设置为CPU的数量,或者二倍与CPU的数量
worker_processes  1;
#定义全局的日志文件和等级,如果子模块未定义日志,则使用此处的设置(相对路径为usr/local/nginx,即nginx安装的地方)
error_log  logs/error.log  info;
#将nginx进程的ID存在至指定文件
pid        logs/nginx.pid;


events {
#定义每个工作进程的连接数,nginx最大连接数为worker_processes*worker_connections
    worker_connections  1024;
}


http {
#引入文件类型映射表,nginx根据映射关系,设置http请求响应头的Content-Type值.
    include       mime.types;
#当在映射表找不到时,默认使用该类型
    default_type  application/octet-stream;
#在进行反向代理时,必须设置该属性为on,返回状态码才会根据对应的error_page的设置进行重新请求
    proxy_intercept_errors on;
#定义日志输出格式
#remote_addr  表示获取调用本服务器的IP地址,
#http_x_forwarded_for 表示获取服务调取的IP链,第一个为clinet的IP
    log_format  main  '$remote_addr - [$time_local] "$request" $status $body_bytes_sent "$http_x_forwarded_for"';
#日志输出(代替前面的日志设置)
    access_log  logs/access.log  main;
#开启高效文件传输
    sendfile        on;
#连接时间为65,
    keepalive_timeout  65;
#开启压缩
    gzip  on;

    server {
#监听80端口
        listen       80;
#匹配从哪个域名过来,liufeng1设置在本地hosts文件中
        server_name  liufeng1;
#设置数据字符集
        charset utf-8;
#日志输出(代替前面的日志设置)
        access_log  logs/host.access.log  main;
#设置错误码对应,当服务器返回指定错误码时,会以对应的路径再次请求,当服务返回500时,会重新发送如下请求:域名/50x.html,被如下location截获
        error_page 404 500 502 503 504  /50x.html;
#错误页面重定向
        location = /50x.html {
#root表示根路径,此处为usr/local/nginx,该location表示请求usr/local/nginx/html/50x.html页面
            root   html;
        }
#设置localtion路径匹配,具体参照nginx总结
#使用proxy_pass表示转发
#当proxy_pass指定的路径以/结尾时,表示拼接时不包含location匹配时的abc,比如proxy_pass = liufeng/,当请求liufeng1/abc/aaa------->liufeng1/aaa(不包含匹配规则中的abc)
#当proxy_pass指定的路径不以/结尾时,表示拼接时包含abc,比如proxy_pass = liufeng,当请求liufeng1/tc/aaa------->liufeng1/tc/aaa
        location /abc {
            proxy_pass http://127.0.0.1:9001;
			#设置请求头
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Real-Port $remote_port;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
#使用rewrite进行重定向
#(.*)第一个小括号用$1取值,第二个小括号用$2表示,   ^/search/(.*)$表示将search后的所有值设置为$1
        location /search {
            rewrite ^/search/(.*)/(.*)$ /search.php?p=$1?;
        }
#配置mysvr的负载均衡,weight表示权重,因为不同的服务器性能能不同(可选项)
#ip_hash根据IP分配,保证每次访问到同一台服务器(可选项)
		upstream mysvr { 
			ip_hash;
			server 127.0.0.1:7878 weight=1;
			server 192.168.10.121:3333 weight=2;
		}
#表示匹配以.php结尾
        location ~ \.php$ {
#此处使用负载均衡
            proxy_pass   http://mysvr;     
        }

    }
    
    server {
        listen       80;
        server_name  liufeng2;

        location / {
#禁止所有路径访问
          deny  all;                     
        }
    }


   server {
        listen       80;
        server_name  liufeng3;
#以gif或jpg结尾的去相对路径html路径下寻找同名的并返回
    location \.(gif|jpg|)$ { 
         root   html;
        }
    }
#alias映射时不会将location匹配的部分拼接	website/aaa会被转换为/var/lib/www/aaa,如果是root定义的话,会被转换为/var/lib/www/website/aaa
    location /website/ {
        alias /var/lib/www;
    }
#设置https
    server {
        listen       443 ssl;
        server_name  localhost;
#ssl证书设置
        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;
#默认即可
        ssl_session_cache    shared:SSL:1m;
#默认即可
        ssl_session_timeout  5m;
#默认即可
        ssl_ciphers  HIGH:!aNULL:!MD5;
#默认即可
        ssl_prefer_server_ciphers  on;

        location / {
            root   html
            index  index.html index.htm;
        }
    }

}
